//
//  TweetCatItem.swift
//  TweetCatApp
//
//  Created by wesley on 2025/9/6.
//

import AppKit
import Foundation


// MARK: - 模型对象：videoId + url + 创建时间
struct TweetCatItem: Identifiable {
        let id = UUID()
        let videoId: String
        let url: String
        let createdAt: Date
}

// MARK: - 单例：把 cookies 写成 Netscape 格式文件
final class CookieNetscapeWriter {
        static let shared = CookieNetscapeWriter()
        private init() {}

        private func baseDir() throws -> URL {
                let dir = URL(fileURLWithPath: "/tmp", isDirectory: true)
                return dir
        }

        @discardableResult
        func writeNetscapeFile(cookies: [[String: Any]], videoId: String) throws
                -> URL
        {
                let lines = makeNetscapeLines(from: cookies)
                let outURL = URL(
                        fileURLWithPath: kTweetCatCookieFile,
                        isDirectory: false
                )

                // 覆盖写入，严格 LF，无 BOM
                let text = lines.joined(separator: "\n") + "\n"
                try text.write(to: outURL, atomically: true, encoding: .utf8)
                try? FileManager.default.setAttributes(
                        [.posixPermissions: 0o600],
                        ofItemAtPath: outURL.path
                )
                return outURL
        }

        /// 标准化生成 Netscape 行
        private func makeNetscapeLines(from cookies: [[String: Any]])
                -> [String]
        {
                var out: [String] = []
                // ⚠️头两行与壳脚本/yt-dlp一致
                out.append("# Netscape HTTP Cookie File")
                out.append("# This file is generated by yt-dlp.  Do not edit.")
                out.append("")

                func toInt(_ any: Any?) -> Int {
                        if let i = any as? Int { return i }
                        if let d = any as? Double { return Int(d) }
                        if let s = any as? String, let dd = Double(s) {
                                return Int(dd)
                        }
                        return 0
                }

                for c in cookies {
                        guard var domain = c["domain"] as? String,
                                !domain.isEmpty
                        else { continue }
                        let path =
                                ((c["path"] as? String).flatMap {
                                        $0.isEmpty ? nil : $0
                                }) ?? "/"
                        let secure =
                                ((c["secure"] as? Bool) == true)
                                ? "TRUE" : "FALSE"
                        let exp = toInt(
                                c["expirationDate"] ?? c["expires"] ?? 0
                        )
                        let name = (c["name"] as? String) ?? ""
                        let value = (c["value"] as? String) ?? ""
                        if name.isEmpty { continue }

                        // hostOnly 若存在则优先；否则按域名是否带点号来推断
                        let hostOnlyFlag: Bool = {
                                if let ho = c["hostOnly"] as? Bool { return ho }
                                if let hoNum = c["hostOnly"] as? NSNumber {
                                        return hoNum.boolValue
                                }
                                // 输入没 hostOnly 就按是否点号开头推断
                                return !domain.hasPrefix(".")
                        }()

                        // 统一规范：
                        // - hostOnly => includeSub = FALSE 且 domain 不带前导点
                        // - 非 hostOnly => includeSub = TRUE 且 domain 带前导点
                        let includeSub: String
                        if hostOnlyFlag {
                                includeSub = "FALSE"
                                if domain.hasPrefix(".") {
                                        domain.removeFirst()
                                }
                        } else {
                                includeSub = "TRUE"
                                if !domain.hasPrefix(".") {
                                        domain = "." + domain
                                }
                        }

                        out.append(
                                "\(domain)\t\(includeSub)\t\(path)\t\(secure)\t\(exp)\t\(name)\t\(value)"
                        )
                }

                return out
        }
}

extension CookieNetscapeWriter {
    static func cookieFileURL() -> URL {
        return URL(fileURLWithPath: kTweetCatCookieFile)
    }
}
